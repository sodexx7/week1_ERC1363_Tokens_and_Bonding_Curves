TODO
1. BancorFormula should delete some unused code
2. question
    if the version of my code is 0.8.9, and the libt is ^0.8.0. Is that matter ?
    https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used



ERC1363BondingCurveToken check points

1. Warning: Contract code size exceeds 24576 bytes, Now just ignore
src/bancorprotocol/BancorFormula.sol


INFO:Detectors_1:
ERC1363BondingCurveToken.burn(uint256) (src/ERC1363BondingCurveToken.sol#154-157) ignores return value by _reserveToken.transfer(msg.sender,redeemAmount) (src/ERC1363BondingCurveToken.sol#156)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Solution
true positives
_reserveToken.transfer(msg.sender, redeemAmount) => require(_reserveToken.transfer(msg.sender, redeemAmount));


INFO:Detectors_2:
BancorFormula.accurateWeights(uint256,uint256) (src/bancorprotocol/BancorFormula.sol#1211-1220) performs a multiplication on the result of a division:
	- _a /= c (src/bancorprotocol/BancorFormula.sol#1214)
	- x = roundDiv(_a * MAX_WEIGHT,_a + _b) (src/bancorprotocol/BancorFormula.sol#1217)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Solution
false positives,BancorFormula should have consider the loss precision.


INFO:Detectors_3:
BancorFormula.saleTargetAmount(uint256,uint256,uint32,uint256) (src/bancorprotocol/BancorFormula.sol#363-391) uses a dangerous strict equality:
	- _amount == _supply (src/bancorprotocol/BancorFormula.sol#379)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Solution
Can't sure

INFO:Detectors_4:
Address._revert(bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Address.sol#236-239)
ERC1363._checkOnTransferReceived(address,address,uint256,bytes) (src/erc1363-payable-token/ERC1363.sol#119-140) uses assembly
	- INLINE ASM (src/erc1363-payable-token/ERC1363.sol#135-137)
ERC1363._checkOnApprovalReceived(address,uint256,bytes) (src/erc1363-payable-token/ERC1363.sol#150-171) uses assembly
	- INLINE ASM (src/erc1363-payable-token/ERC1363.sol#166-168)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Solution
Can't sure

INFO:Detectors_5:
Different versions of Solidity are used:
	- Version used: ['0.8.9', '^0.8.0', '^0.8.1', '^0.8.2']
	- 0.8.9 (src/ERC1363BondingCurveToken.sol#2)
	- 0.8.9 (src/bancorprotocol/BancorFormula.sol#2)
	- 0.8.9 (src/bancorprotocol/interfaces/IBancorFormula.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (src/erc1363-payable-token/ERC1363.sol#3)
	- ^0.8.0 (src/erc1363-payable-token/IERC1363.sol#3)
	- ^0.8.0 (src/erc1363-payable-token/IERC1363Receiver.sol#3)
	- ^0.8.0 (src/erc1363-payable-token/IERC1363Spender.sol#3)
	- ^0.8.1 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4)
	- ^0.8.2 (lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Solution
Can't sure


INFO:Detectors_6:
Address._revert(bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#231-243) is never used and should be removed
Address.functionCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#89-91) is never used and should be removed
Address.functionCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#99-105) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#118-120) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#128-137) is never used and should be removed
Address.functionDelegateCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#170-172) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#180-187) is never used and should be removed
Address.functionStaticCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#145-147) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#155-162) is never used and should be removed
Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#64-69) is never used and should be removed
Address.verifyCallResult(bool,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#219-229) is never used and should be removed
Address.verifyCallResultFromTarget(address,bool,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#195-211) is never used and should be removed
Context._msgData() (lib/openzeppelin-contracts/contracts/utils/Context.sol#21-23) is never used and should be removed
Initializable._disableInitializers() (lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol#145-151) is never used and should be removed
Initializable._getInitializedVersion() (lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol#156-158) is never used and should be removed
Initializable._isInitializing() (lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol#163-165) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-cod

Solution
Can't sure
library code not used, Is it matter?


INFO:Detectors_7:
Low level call in Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#64-69):
	- (success) = recipient.call{value: amount}() (lib/openzeppelin-contracts/contracts/utils/Address.sol#67)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Solution
Doesn't matter


INFO:Detectors_7:
ERC1363BondingCurveToken (src/ERC1363BondingCurveToken.sol#35-199) should inherit from IERC1363Receiver (src/erc1363-payable-token/IERC1363Receiver.sol#10-32)
ERC1363BondingCurveToken (src/ERC1363BondingCurveToken.sol#35-199) should inherit from IERC1363Receiver (src/erc1363-payable-token/IERC1363Receiver.sol#10-32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Solution
true positives

INFO:Detectors_8:
Function ERC1363BondingCurveToken._setGasPrice(uint256) (src/ERC1363BondingCurveToken.sol#143-146) is not in mixedCase

Solution
false positives


INFO:Detectors_9:
BancorFormula.generalExp(uint256,uint8) (src/bancorprotocol/BancorFormula.sol#748-818) uses literals with too many digits:

Solution
It seems doesn't matter 



src/SanctionToken.sol


INFO:Detectors_1:
SanctionToken.constructor(uint256,string,string).name (src/SanctionToken.sol#22) shadows:
	- ERC20.name() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#62-64) (function)
	- IERC20Metadata.name() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)
SanctionToken.constructor(uint256,string,string).symbol (src/SanctionToken.sol#22) shadows:
	- ERC20.symbol() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#70-72) (function)
	- IERC20Metadata.symbol() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#22) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Solution
Can't sure


INFO:Detectors_2:
Different versions of Solidity are used:
	- Version used: ['0.8.9', '^0.8.0']
	- 0.8.9 (src/SanctionToken.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Solution
It seems that can't avoid when import other libs


INFO:Detectors_3:
Context._msgData() (lib/openzeppelin-contracts/contracts/utils/Context.sol#21-23) is never used and should be removed
ERC20._burn(address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#277-293) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Solution
It seems that can't avoid when import other libs



src/TokenGodMod.sol


INFO:Detectors_1:
TokenGodMod.constructor(address,uint256).totalSupply (src/TokenGodMod.sol#20) shadows:
	- ERC20.totalSupply() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#94-96) (function)
	- IERC20.totalSupply() (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#27) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Solution
Can't sure

INFO:Detectors_2:
TokenGodMod.constructor(address,uint256).specialAddress (src/TokenGodMod.sol#20) lacks a zero-check on :
		- _specialAddress = specialAddress (src/TokenGodMod.sol#21)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Solution
false positives


INFO:Detectors_3:
TokenGodMod._specialAddress (src/TokenGodMod.sol#18) should be immutable
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable

Solution
true positives


src/UntrustedEscrow.sol

INFO:Detectors_1:
Reentrancy in UntrustedEscrow.deposit(address,uint256,address) (src/UntrustedEscrow.sol#69-96):
	External calls:
	- ERC20(erc20Token).safeTransferFrom(msg.sender,address(this),amount) (src/UntrustedEscrow.sol#86)
	State variables written after the call(s):
	- _seller_buyer_coinInfo[sellerAddress][msg.sender].balance = transferValue (src/UntrustedEscrow.sol#92)
	UntrustedEscrow._seller_buyer_coinInfo (src/UntrustedEscrow.sol#48) can be used in cross function reentrancies:
	- UntrustedEscrow.deposit(address,uint256,address) (src/UntrustedEscrow.sol#69-96)
	- UntrustedEscrow.escrowCoinInfo(address,address) (src/UntrustedEscrow.sol#132-134)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Solution TODO

INFO:Detectors_2:
Reentrancy in UntrustedEscrow.deposit(address,uint256,address) (src/UntrustedEscrow.sol#69-96):
	External calls:
	- ERC20(erc20Token).safeTransferFrom(msg.sender,address(this),amount) (src/UntrustedEscrow.sol#86)
	Event emitted after the call(s):
	- Deposit(msg.sender,sellerAddress,erc20Token,transferValue) (src/UntrustedEscrow.sol#95)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Solution TODO  
the same situaiton as others


INFO:Detectors_3:
UntrustedEscrow.withdraw(address) (src/UntrustedEscrow.sol#101-122) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp - _seller_buyer_coinInfo[msg.sender][buyer].depositTimestamp > 259200,Should withdraw after 3 days) (src/UntrustedEscrow.sol#102-105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Solution
false positive. It doesn't mattar for this implementant

INFO:Detectors_4:
Address._revert(bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Address.sol#236-239)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Solution
The import library, which should tested effectvely.
false positive

INFO:Detectors_5:
Different versions of Solidity are used:
	- Version used: ['0.8.9', '^0.8.0', '^0.8.1']
	- 0.8.9 (src/UntrustedEscrow.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/security/Pausable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
	- ^0.8.1 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Solution
Falsepositive


INFO:Detectors_6:
Address.functionCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#89-91) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#118-120) is never used and should be removed
Address.functionDelegateCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#170-172) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#180-187) is never used and should be removed
Address.functionStaticCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#145-147) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#155-162) is never used and should be removed
Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#64-69) is never used and should be removed
Address.verifyCallResult(bool,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#219-229) is never used and should be removed
Context._msgData() (lib/openzeppelin-contracts/contracts/utils/Context.sol#21-23) is never used and should be removed
ERC20._burn(address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#277-293) is never used and should be removed
ERC20._mint(address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#251-264) is never used and should be removed
ReentrancyGuard._reentrancyGuardEntered() (lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol#74-76) is never used and should be removed
SafeERC20._callOptionalReturnBool(IERC20,bytes) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#134-142) is never used and should be removed
SafeERC20.forceApprove(IERC20,address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#82-89) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#45-54) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#69-75) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#60-63) is never used and should be removed
SafeERC20.safePermit(IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#95-109) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Solution
Some import lib, some of  which function will never be uesed.

INFO:Detectors_7:
Low level call in SafeERC20._callOptionalReturnBool(IERC20,bytes) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#134-142):
	- (success,returndata) = address(token).call(data) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#139)
Low level call in Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#64-69):
	- (success) = recipient.call{value: amount}() (lib/openzeppelin-contracts/contracts/utils/Address.sol#67)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

The import library, which should tested effectvely.

INFO:Detectors_8:
Function IERC20Permit.DOMAIN_SEPARATOR() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol#59) is not in mixedCase
Variable UntrustedEscrow._seller_buyer_coinInfo (src/UntrustedEscrow.sol#48) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions







